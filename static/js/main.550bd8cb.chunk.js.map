{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleChangeName","e","setState","name","target","value","handleChangeLastname","lastname","handleChangeEmail","email","handleChangePosition","position","handleChangeDateAdmission","dateAdmission","stringDate","split","dateAdmissionFormat","handleChangeImage","image","URL","createObjectURL","files","errorMessage","generatePhoto","state","photo","ReactDOM","findDOMNode","refs","domtoimage","toBlob","then","blob","FileSaver","saveAs","_this2","react_default","a","createElement","className","Form","FormGroup","Label","Input","onChange","type","placeholder","FormText","color","ref","alt","src","Button","onClick","Component","Boolean","window","location","hostname","match","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.550bd8cb.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { Button, Form, FormGroup, Label, Input, FormText } from 'reactstrap';\r\nimport domtoimage from 'dom-to-image';\r\nimport ReactDOM from 'react-dom';\r\nimport FileSaver from 'file-saver';\r\nimport './App.css';\r\n\r\nclass App extends Component {\r\n  \r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      name: '',\r\n      lastname: '',\r\n      email: '',\r\n      position: '',\r\n      dateAdmission: '',\r\n      dateAdmissionFormat: '',\r\n      image: null,\r\n      errorMessage: ''\r\n    }\r\n  }\r\n\r\n  handleChangeName = (e) => {\r\n    this.setState({name: e.target.value});\r\n  }\r\n\r\n  handleChangeLastname = (e) => {\r\n    this.setState({lastname: e.target.value});\r\n  }\r\n\r\n  handleChangeEmail = (e) => {\r\n    this.setState({email: e.target.value});\r\n  }\r\n\r\n  handleChangePosition = (e) => {\r\n    this.setState({position: e.target.value});\r\n  }\r\n\r\n  handleChangeDateAdmission = (e) => {\r\n    this.setState({dateAdmission: e.target.value});\r\n    let date = e.target.value;\r\n    let stringDate = date.split('-');\r\n    this.setState({dateAdmissionFormat: stringDate[2] + '/' + stringDate[1] + '/' + stringDate[0]});\r\n  }\r\n\r\n  handleChangeImage = (e) => {\r\n    this.setState({image: URL.createObjectURL(e.target.files[0])});\r\n    this.setState({errorMessage: ''});\r\n  }\r\n\r\n  generatePhoto = () => {\r\n    if(this.state.image === null) {\r\n      this.setState({errorMessage: 'No se ha seleccionado una imagen.'});\r\n      return;\r\n    }\r\n\r\n    this.setState({errorMessage: ''});\r\n    let photo = ReactDOM.findDOMNode(this.refs['photo']);\r\n\r\n    domtoimage.toBlob(photo)\r\n    .then(function (blob) {\r\n      FileSaver.saveAs(blob, 'carnet.png');\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"container form-main\">\r\n        <h3 className=\"mt-4 text-center\">Generador de carnet</h3>\r\n        <div className=\"row\">\r\n          <div className=\"col-md-6\">\r\n          <Form>\r\n            <h5 className=\"my-4\">Ingresa tus datos</h5>\r\n            <FormGroup>\r\n              <Label>Nombre</Label>\r\n              <Input onChange={e => this.handleChangeName(e)} value={this.state.name} type=\"text\" placeholder=\"Ingrese aquí su nombre.\" />\r\n            </FormGroup>\r\n            <FormGroup>\r\n              <Label>Apellido</Label>\r\n              <Input onChange={e => this.handleChangeLastname(e)} value={this.state.lastname} type=\"text\" placeholder=\"Ingrese aquí su apellido.\" />\r\n            </FormGroup>\r\n            <FormGroup>\r\n              <Label>Correo</Label>\r\n              <Input onChange={e => this.handleChangeEmail(e)} value={this.state.email}\r\n              type=\"email\" placeholder=\"Ingrese aquí su correo.\" />\r\n            </FormGroup>\r\n            <FormGroup>\r\n              <Label>Cargo</Label>\r\n              <Input onChange={e => this.handleChangePosition(e)} value={this.state.position} type=\"select\">\r\n                <option value=\"\">Seleccione el cargo...</option>\r\n                <option value=\"Analista funcional\">Analista funcional</option>\r\n                <option value=\"Técnico\">Técnico</option>\r\n                <option value=\"Secretaria\">Secretaria</option>\r\n                <option value=\"Seo\">Seo</option>\r\n                <option value=\"Administrador\">Administrador</option>\r\n              </Input>\r\n            </FormGroup> \r\n            <FormGroup>\r\n              <Label>Fecha de ingreso</Label>\r\n              <Input onChange={e => this.handleChangeDateAdmission(e)} value={this.state.dateAdmission} type=\"date\" placeholder=\"Ingrese la fecha de ingreso.\"\r\n              />\r\n            </FormGroup>\r\n            <FormGroup>\r\n              <Label>Foto - <span className=\"note\">Tamaño 135 x 180 px</span> </Label>\r\n              <Input onChange={e => this.handleChangeImage(e)} type=\"file\"/>\r\n              <FormText color=\"muted\">\r\n                Seleccione una foto para adjuntarla a su carnet.\r\n              </FormText>\r\n            </FormGroup>          \r\n          </Form>\r\n          </div>\r\n          <div className=\"col-md-6\">\r\n            <div className=\"preview\">\r\n              <h5 className=\"my-4\">Vista Previa</h5>\r\n              <div className=\"mb-3 p-2 view-preview-container\">\r\n                <div ref={'photo'} className=\"container-fluid card\">\r\n                  <div className=\"row\">\r\n                    <div className=\"col-sm-4 preview-image\">\r\n                      {this.state.image === null && <div className=\"empty-image d-flex align-items-center justify-content-center card\">\r\n                        <div>135 X 180</div>\r\n                      </div>}\r\n                      <img alt=\"\" src={this.state.image}/>\r\n                    </div>\r\n                    <div className=\"col-sm-8 preview-data\">\r\n                      <p>Nombre: {this.state.name}</p>\r\n                      <p>Apellido: {this.state.lastname}</p>\r\n                      <p>Correo: {this.state.email}</p>\r\n                      <p>Cargo: {this.state.position}</p>\r\n                      <p className=\"mb-0\">Ingreso: {this.state.dateAdmissionFormat}</p>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              <Button onClick={this.generatePhoto}>Descargar</Button>\r\n              <p>{this.state.errorMessage}</p>\r\n            </div>\r\n          </div>\r\n        </div>        \r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}